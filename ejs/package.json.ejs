<% 
const addDepIf = (cond, deps) => cond
	? Object.fromEntries(deps.split(" ").map(dep => [ dep, "*"]))
	: {} 

const devDependencies = {
	...(addDepIf(CONFIG_TESTS, "jest")),
	...(addDepIf(CONFIG_TS, "typescript @types/node")), 
	...(addDepIf(CONFIG_TESTS && CONFIG_TS, "ts-jest @types/jest"))
}

const addScriptsIf = (cond, deps) => cond
	? deps
	: {} 

const scripts = {
	...(addScriptsIf(CONFIG_TS, { build: "tsc" })),
	...(addScriptsIf(CONFIG_TESTS, { test: "jest" }))
}

const bin = {
	...(addScriptsIf(CONFIG_CMDLINE, { mytool: "mytool.js" })),
}

const isEmptyObject = obj => Object.keys(obj).length === 0

const avoidEmptyObjects = obj => {
	for (const prop in obj) {
	 	if (isEmptyObject(obj[prop])) {
			delete obj[prop]
		}
	}
	return obj
}

%><%- JSON.stringify(avoidEmptyObjects({ devDependencies, scripts, bin }), null, 2) %>
